from refgenconf import RefGenConf
from snakemake_helper_functions import (
    get_input_templates,
    get_req_files_by_asset,
    get_asset_file_spec,
    get_pep_intersect_for_genome,
    get_build_resources_wrapper,
)

configfile: "config.yaml"
pepfile: "../asset_pep/refgenie_build_cfg.yaml"
pepschema: "https://schema.databio.org/refgenie/refgenie_build.yaml"

rgc = RefGenConf(os.environ.get("REFGENIE")) # read the config file from the environment variable
build_order = rgc.get_build_groups() # get asset build order based on the recipes managed by refgenie

# this list can be used to specify a list of assets to skip
assets_to_exclude = config["assets_to_exclude"] if "assets_to_exclude" in config else []

# get unique genomes from PEP or config file
genomes_to_process = (
    config["genomes_to_process"]
    if "genomes_to_process" in config
    else list(set(pep.sample_table.genome))
)


# exclude fasta since it's already built in the namespace init rule
build_order[0].remove("fasta")

top_level_assets = build_order[0]
derived_assets_level1 = build_order[1]
derived_assets_level2 = build_order[2]

rule map_init_genome_namespace:
    input: 
        files = lambda wildcards: get_input_templates(wildcards=wildcards, asset="fasta")
    params:
        files_spec = lambda wildcards: " ".join(get_asset_file_spec(wildcards=wildcards, asset="fasta"))
    resources:
        mem = lambda wildcards: int(get_build_resources_wrapper(wildcards, force_asset="fasta")["mem"]),
        time = lambda wildcards: get_build_resources_wrapper(wildcards, force_asset="fasta")["time"],
        local_cores = lambda wildcards: get_build_resources_wrapper(wildcards, force_asset="fasta")["cores"],
    output: 
        flag = touch(".flags/{genome}-init_genome_namespace.done")
    shell: "refgenie build --map {wildcards.genome}/fasta --files {params.files_spec}"

rule reduce_init_genome_namespace:
    input: 
        # flag = rules.map_init_genome_namespace.output.flag
        flag = expand(".flags/{genome}-init_genome_namespace.done", genome=genomes_to_process)
    output: 
        flag = touch(".flags/reduce_init_genome_namespaces.done")
    shell: "refgenie build --reduce"

rule map_top_level_assets:
    input: 
        flag = rules.reduce_init_genome_namespace.output.flag,
        files = get_input_templates
    params:
        files_spec = lambda wildcards: " ".join(get_asset_file_spec(wildcards=wildcards))
    resources:
        mem = lambda wildcards: int(get_build_resources_wrapper(wildcards)["mem"]),
        time = lambda wildcards: get_build_resources_wrapper(wildcards)["time"],
        local_cores = lambda wildcards: get_build_resources_wrapper(wildcards)["cores"],
    output: 
        flag = touch(".flags/{genome}-{asset}-top_lvl.done") 
    shell: "refgenie build --map {wildcards.genome}/{wildcards.asset} --files {params.files_spec}"

rule reduce_top_level_assets:
    input: 
        flag = lambda wildcards: [
            ".flags/{g}-{a}-top_lvl.done".format(g=wildcards.genome, a=a)
            for a in get_pep_intersect_for_genome(
                genome=wildcards.genome, 
                recipe_list=top_level_assets, 
                project=pep, 
                exclusion_list=assets_to_exclude,
            )
        ],
        # need to require the init napespaces step to run 
        # in case the there are no top level assets to build
        flag_prev = rules.reduce_init_genome_namespace.output.flag
    output: 
        flag = touch(".flags/{genome}-reduce_top_lvl.done")
    shell: "refgenie build --reduce"

rule map_derived_level1_assets:
    input: 
        flag = rules.reduce_top_level_assets.output.flag
    resources:
        mem = lambda wildcards: int(get_build_resources_wrapper(wildcards)["mem"]),
        time = lambda wildcards: get_build_resources_wrapper(wildcards)["time"],
        local_cores = lambda wildcards: get_build_resources_wrapper(wildcards)["cores"],
    output: 
        flag = touch(".flags/{genome}-{asset}-derived_lvl1.done")
    shell: "refgenie build --map {wildcards.genome}/{wildcards.asset}"

rule reduce_derived_level1_assets:
    input: 
        flag = lambda wildcards: [
            ".flags/{g}-{a}-derived_lvl1.done".format(g=wildcards.genome, a=a)
            for a in get_pep_intersect_for_genome(
                genome=wildcards.genome, 
                recipe_list=derived_assets_level1, 
                project=pep, 
                exclusion_list=assets_to_exclude,
            )
        ]
    output: 
        flag = touch(".flags/{genome}-reduce_derived_lvl1.done")
    shell: "refgenie build --reduce"

rule map_derived_level2_assets:
    input: 
        flag = rules.reduce_derived_level1_assets.output.flag
    resources:
        mem = lambda wildcards: int(get_build_resources_wrapper(wildcards)["mem"]),
        time = lambda wildcards: get_build_resources_wrapper(wildcards)["time"],
        local_cores = lambda wildcards: get_build_resources_wrapper(wildcards)["cores"],
    output: 
        flag = touch(".flags/{genome}-{asset}-derived_lvl2.done")
    shell: "refgenie build --map {wildcards.genome}/{wildcards.asset}"

rule reduce_derived_level2_assets:
    input: 
        flag = lambda wildcards: [
            ".flags/{g}-{a}-derived_lvl2.done".format(g=wildcards.genome, a=a)
            for a in get_pep_intersect_for_genome(
                genome=wildcards.genome, 
                recipe_list=derived_assets_level2, 
                project=pep, 
                exclusion_list=assets_to_exclude,
            )
        ]
    output: 
        flag = touch(".flags/{genome}-reduce_derived_lvl2.done")
    shell: "refgenie build --reduce"

rule reduce_all:
    input: expand(".flags/{genome}-reduce_derived_{level}.done", genome=genomes_to_process, level=["lvl1", "lvl2"])
